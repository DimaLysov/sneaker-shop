networks:
  app-network:
    driver: bridge

services:
  postgres:
    image: postgres:14-alpine
    env_file: 
      - ./back/.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sneakers-shop-db"]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - app-network

  backend:
    build:
      context: ./back
    command: sh -c "python manage.py migrate && gunicorn --bind 0.0.0.0:8000 backend.wsgi:application"
    env_file:
      - ./back/.env
    ports:
      - "8000:8000"
    # restart: always
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    build:
      context: ./front
    env_file:
      - ./front/.env
    ports:
      - "3000:3000"
    depends_on:
      - backend
    # restart: always
    networks:
      - app-network
    
  nginx:
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

volumes:
  postgres_data:
  node_modules: